philosophers
- to create multiple threads we can use a pointer to multiple malloced structs.
		malloc(phil_count * sizeof(p_thread_t));
- usleep (time_to_x)
- something with forks
	use bool for forks. false if in use true if not ?
	



functions
- memset
- printf
- malloc
- free
- write
- usleep
- gettimeofday
- int pthread_create(pthread_t *thread, const pthread_attr_t *attr,\
void *(*start_routine)(void *), void *arg)
- int pthread_detach(pthread_t thread)
- int pthread_join(pthread_t thread, void **value_ptr)
- int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr)
- int pthread_mutex_destroy(pthread_mutex_t *mutex)
- int pthread_mutex_lock(pthread_mutex_t *mutex)
- int pthread_mutex_unlock(pthread_mutex_t *mutex)


pthread_create ; creates new thread
int pthread_create(pthread_t * __restrict__thread, 
                   const pthread_attr_t *attr, 
                   void *(*start_routine) (void *arg), 
                   void * __restrict__arg)
pthread *restrict_thread
- data type to identify a thread (maybe as a personal id) and also returned by p_create

const pthread_attr_t *attr
- defines attributes can be left on NULL

void *(*start_routine) (void *arg)
- creates the thread with arg as the only argument

void * __restrict__arg
- argument

